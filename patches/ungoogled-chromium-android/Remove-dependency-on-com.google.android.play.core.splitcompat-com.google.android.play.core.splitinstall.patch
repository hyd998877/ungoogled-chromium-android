From: Wengling Chen <feiyu2817@gmail.com>
Date: Fri, 10 Jan 2020 21:49:36 -0500
Subject: Remove dependency on com.google.android.play.core.splitcompat, com.google.android.play.core.splitinstall

---
 chrome/android/BUILD.gn                                                                                                     |    1 
 chrome/browser/language/android/BUILD.gn                                                                                    |    1 
 chrome/browser/language/android/java/src/org/chromium/chrome/browser/language/LanguageSplitInstaller.java                   |   63 ----------
 components/module_installer/android/BUILD.gn                                                                                |    2 
 components/module_installer/android/java/src/org/chromium/components/module_installer/engine/SplitCompatEngine.java         |   50 -------
 components/module_installer/android/java/src/org/chromium/components/module_installer/engine/SplitCompatEngineFacade.java   |   21 ---
 components/module_installer/android/java/src/org/chromium/components/module_installer/logger/Logger.java                    |    9 -
 components/module_installer/android/java/src/org/chromium/components/module_installer/logger/PlayCoreLogger.java            |   23 ---
 components/module_installer/android/java/src/org/chromium/components/module_installer/logger/SplitAvailabilityLogger.java   |   27 ----
 components/module_installer/android/java/src/org/chromium/components/module_installer/logger/SplitInstallFailureLogger.java |   41 ------
 components/module_installer/android/java/src/org/chromium/components/module_installer/logger/SplitInstallStatusLogger.java  |   27 ----
 components/module_installer/android/java/src/org/chromium/components/module_installer/util/CrashKeyRecorder.java            |    6 
 components/module_installer/android/java/src/org/chromium/components/module_installer/util/SplitCompatInitializer.java      |    5 
 13 files changed, 21 insertions(+), 255 deletions(-)

--- a/components/module_installer/android/java/src/org/chromium/components/module_installer/engine/SplitCompatEngine.java
+++ b/components/module_installer/android/java/src/org/chromium/components/module_installer/engine/SplitCompatEngine.java
@@ -8,11 +8,6 @@ import android.app.Activity;
 
 import androidx.annotation.VisibleForTesting;
 
-import com.google.android.play.core.splitinstall.SplitInstallException;
-import com.google.android.play.core.splitinstall.SplitInstallRequest;
-import com.google.android.play.core.splitinstall.SplitInstallStateUpdatedListener;
-import com.google.android.play.core.splitinstall.model.SplitInstallSessionStatus;
-
 import org.chromium.base.ThreadUtils;
 
 import java.util.ArrayList;
@@ -28,7 +23,6 @@ import java.util.Set;
  */
 class SplitCompatEngine implements InstallEngine {
     private final SplitCompatEngineFacade mFacade;
-    private final SplitInstallStateUpdatedListener mUpdateListener = getStatusUpdateListener();
     private static final Map<String, List<InstallListener>> sSessions = new HashMap<>();
 
     public SplitCompatEngine() {
@@ -46,13 +40,11 @@ class SplitCompatEngine implements Insta
 
     @Override
     public boolean isInstalled(String moduleName) {
-        Set<String> installedModules = mFacade.getSplitManager().getInstalledModules();
-        return installedModules.contains(moduleName);
+        return false;
     }
 
     @Override
     public void installDeferred(String moduleName) {
-        mFacade.getSplitManager().deferredInstall(Collections.singletonList(moduleName));
         mFacade.getLogger().logRequestDeferredStart(moduleName);
     }
 
@@ -71,47 +63,9 @@ class SplitCompatEngine implements Insta
             { add(listener); }
         });
 
-        SplitInstallRequest request = mFacade.createSplitInstallRequest(moduleName);
-
-        mFacade.getSplitManager().startInstall(request).addOnFailureListener(ex -> {
-            // TODO(fredmello): look into potential issues with mixing split error code
-            // with our logger codes - fix accordingly.
-            mFacade.getLogger().logRequestFailure(moduleName,
-                    ex instanceof SplitInstallException
-                            ? ((SplitInstallException) ex).getErrorCode()
-                            : mFacade.getLogger().getUnknownRequestErrorCode());
-
-            String message = String.format(Locale.US, "Request Exception: %s", ex.getMessage());
-            notifyListeners(moduleName, false);
-        });
-
         mFacade.getLogger().logRequestStart(moduleName);
     }
 
-    private SplitInstallStateUpdatedListener getStatusUpdateListener() {
-        return state -> {
-            if (state.moduleNames().size() != 1) {
-                throw new UnsupportedOperationException("Only one module supported.");
-            }
-
-            int status = state.status();
-            String moduleName = state.moduleNames().get(0);
-
-            switch (status) {
-                case SplitInstallSessionStatus.INSTALLED:
-                    mFacade.updateCrashKeys();
-                    notifyListeners(moduleName, true);
-                    break;
-                case SplitInstallSessionStatus.FAILED:
-                    notifyListeners(moduleName, false);
-                    mFacade.getLogger().logStatusFailure(moduleName, state.errorCode());
-                    break;
-            }
-
-            mFacade.getLogger().logStatus(moduleName, status);
-        };
-    }
-
     private void notifyListeners(String moduleName, Boolean success) {
         for (InstallListener listener : sSessions.get(moduleName)) {
             notifyListener(listener, success);
@@ -131,13 +85,11 @@ class SplitCompatEngine implements Insta
 
     private void registerUpdateListener() {
         if (sSessions.size() == 0) {
-            mFacade.getSplitManager().registerListener(mUpdateListener);
         }
     }
 
     private void unregisterUpdateListener() {
         if (sSessions.size() == 0) {
-            mFacade.getSplitManager().unregisterListener(mUpdateListener);
         }
     }
 
--- a/components/module_installer/android/java/src/org/chromium/components/module_installer/engine/SplitCompatEngineFacade.java
+++ b/components/module_installer/android/java/src/org/chromium/components/module_installer/engine/SplitCompatEngineFacade.java
@@ -6,11 +6,6 @@ package org.chromium.components.module_i
 
 import android.app.Activity;
 
-import com.google.android.play.core.splitcompat.SplitCompat;
-import com.google.android.play.core.splitinstall.SplitInstallManager;
-import com.google.android.play.core.splitinstall.SplitInstallManagerFactory;
-import com.google.android.play.core.splitinstall.SplitInstallRequest;
-
 import org.chromium.base.ContextUtils;
 import org.chromium.components.module_installer.logger.Logger;
 import org.chromium.components.module_installer.logger.PlayCoreLogger;
@@ -21,16 +16,13 @@ import org.chromium.components.module_in
  * cannot be easily mocked and simplify the engine's design.
  */
 class SplitCompatEngineFacade {
-    private final SplitInstallManager mSplitManager;
     private final Logger mLogger;
 
     public SplitCompatEngineFacade() {
-        this(SplitInstallManagerFactory.create(ContextUtils.getApplicationContext()),
-                new PlayCoreLogger());
+        this(new PlayCoreLogger());
     }
 
-    public SplitCompatEngineFacade(SplitInstallManager manager, Logger umaLogger) {
-        mSplitManager = manager;
+    public SplitCompatEngineFacade(Logger umaLogger) {
         mLogger = umaLogger;
     }
 
@@ -38,24 +30,15 @@ class SplitCompatEngineFacade {
         return mLogger;
     }
 
-    public SplitInstallManager getSplitManager() {
-        return mSplitManager;
-    }
-
     public void installActivity(Activity activity) {
         // Note that SplitCompat (install) needs to be called on the Application Context prior
         // to calling this method - this is guaranteed by the behavior of SplitCompatEngine.
-        SplitCompat.installActivity(activity);
     }
 
     public void notifyObservers() {
         ModuleUtil.notifyModuleInstalled();
     }
 
-    public SplitInstallRequest createSplitInstallRequest(String moduleName) {
-        return SplitInstallRequest.newBuilder().addModule(moduleName).build();
-    }
-
     public void updateCrashKeys() {
         ModuleUtil.updateCrashKeys();
     }
--- a/components/module_installer/android/java/src/org/chromium/components/module_installer/logger/Logger.java
+++ b/components/module_installer/android/java/src/org/chromium/components/module_installer/logger/Logger.java
@@ -4,9 +4,6 @@
 
 package org.chromium.components.module_installer.logger;
 
-import com.google.android.play.core.splitinstall.model.SplitInstallErrorCode;
-import com.google.android.play.core.splitinstall.model.SplitInstallSessionStatus;
-
 /**
  * Logger for SplitCompat Engine.
  */
@@ -17,7 +14,7 @@ public interface Logger {
      * @param moduleName The module name.
      * @param errorCode The error code.
      */
-    void logRequestFailure(String moduleName, @SplitInstallErrorCode int errorCode);
+    void logRequestFailure(String moduleName, int errorCode);
 
     /**
      * Logs exceptions that happen during the installation process.
@@ -25,7 +22,7 @@ public interface Logger {
      * @param moduleName The module name.
      * @param errorCode The error code.
      */
-    void logStatusFailure(String moduleName, @SplitInstallErrorCode int errorCode);
+    void logStatusFailure(String moduleName, int errorCode);
 
     /**
      * Logs the status count and duration during a module installation process.
@@ -33,7 +30,7 @@ public interface Logger {
      * @param moduleName The module name
      * @param status The status code
      */
-    void logStatus(String moduleName, @SplitInstallSessionStatus int status);
+    void logStatus(String moduleName, int status);
 
     /**
      * Logs the request start time.
--- a/components/module_installer/android/java/src/org/chromium/components/module_installer/logger/PlayCoreLogger.java
+++ b/components/module_installer/android/java/src/org/chromium/components/module_installer/logger/PlayCoreLogger.java
@@ -4,9 +4,6 @@
 
 package org.chromium.components.module_installer.logger;
 
-import com.google.android.play.core.splitinstall.model.SplitInstallErrorCode;
-import com.google.android.play.core.splitinstall.model.SplitInstallSessionStatus;
-
 /**
  * Concrete Logger for SplitCompat Installers (proxy to specific loggers).
  */
@@ -28,32 +25,18 @@ public class PlayCoreLogger implements L
     }
 
     @Override
-    public void logRequestFailure(String moduleName, @SplitInstallErrorCode int errorCode) {
+    public void logRequestFailure(String moduleName, int errorCode) {
         mFailureLogger.logRequestFailure(moduleName, errorCode);
     }
 
     @Override
-    public void logStatusFailure(String moduleName, @SplitInstallErrorCode int errorCode) {
+    public void logStatusFailure(String moduleName, int errorCode) {
         mFailureLogger.logStatusFailure(moduleName, errorCode);
     }
 
     @Override
-    public void logStatus(String moduleName, @SplitInstallSessionStatus int status) {
+    public void logStatus(String moduleName, int status) {
         mStatusLogger.logStatusChange(moduleName, status);
-
-        if (status == SplitInstallSessionStatus.INSTALLED) {
-            mAvailabilityLogger.storeModuleInstalled(moduleName, status);
-            mAvailabilityLogger.logInstallTimes(moduleName);
-
-            // Keep old behavior where we log a 'success' bit with all other failures.
-            mFailureLogger.logStatusSuccess(moduleName);
-        } else if (status == SplitInstallSessionStatus.CANCELED) {
-            // Keep old behavior where we log a 'canceled' bit with all other failures.
-            mFailureLogger.logStatusCanceled(moduleName);
-        } else if (status == SplitInstallSessionStatus.DOWNLOADED) {
-            // Keep old behavior where we log a 'no split compat' bit with all other failures.
-            mFailureLogger.logStatusNoSplitCompat(moduleName);
-        }
     }
 
     @Override
--- a/components/module_installer/android/java/src/org/chromium/components/module_installer/logger/SplitAvailabilityLogger.java
+++ b/components/module_installer/android/java/src/org/chromium/components/module_installer/logger/SplitAvailabilityLogger.java
@@ -9,10 +9,6 @@ import android.content.SharedPreferences
 import android.os.SystemClock;
 import android.util.SparseLongArray;
 
-import com.google.android.play.core.splitinstall.SplitInstallManager;
-import com.google.android.play.core.splitinstall.SplitInstallManagerFactory;
-import com.google.android.play.core.splitinstall.model.SplitInstallSessionStatus;
-
 import org.chromium.base.ContextUtils;
 import org.chromium.base.metrics.RecordHistogram;
 
@@ -54,19 +50,6 @@ public class SplitAvailabilityLogger {
         requestedModules.addAll(prefs.getStringSet(DEFERRED_REQ_PREV, new HashSet<>()));
 
         Context context = ContextUtils.getApplicationContext();
-        SplitInstallManager manager = SplitInstallManagerFactory.create(context);
-        Set<String> installedModules = manager.getInstalledModules();
-
-        for (String name : requestedModules) {
-            recordAvailabilityStatus(
-                    name, installedModules.contains(name) ? INSTALLED_REQUESTED : REQUESTED);
-        }
-
-        for (String name : installedModules) {
-            if (!requestedModules.contains(name)) {
-                recordAvailabilityStatus(name, INSTALLED_UNREQUESTED);
-            }
-        }
     }
 
     private static void recordAvailabilityStatus(String moduleName, int status) {
@@ -80,14 +63,6 @@ public class SplitAvailabilityLogger {
      * @param moduleName The module name.
      */
     public void logInstallTimes(String moduleName) {
-        recordInstallTime(moduleName, "", SplitInstallSessionStatus.UNKNOWN,
-                SplitInstallSessionStatus.INSTALLED);
-        recordInstallTime(moduleName, ".PendingDownload", SplitInstallSessionStatus.UNKNOWN,
-                SplitInstallSessionStatus.DOWNLOADING);
-        recordInstallTime(moduleName, ".Download", SplitInstallSessionStatus.DOWNLOADING,
-                SplitInstallSessionStatus.INSTALLING);
-        recordInstallTime(moduleName, ".Installing", SplitInstallSessionStatus.INSTALLING,
-                SplitInstallSessionStatus.INSTALLED);
     }
 
     /**
@@ -172,7 +147,7 @@ public class SplitAvailabilityLogger {
 
         public InstallTimes(boolean isCached) {
             mIsCached = isCached;
-            mInstallTimes.put(SplitInstallSessionStatus.UNKNOWN, SystemClock.uptimeMillis());
+            mInstallTimes.put(0, SystemClock.uptimeMillis());
         }
     }
 }
--- a/components/module_installer/android/java/src/org/chromium/components/module_installer/logger/SplitInstallFailureLogger.java
+++ b/components/module_installer/android/java/src/org/chromium/components/module_installer/logger/SplitInstallFailureLogger.java
@@ -4,8 +4,6 @@
 
 package org.chromium.components.module_installer.logger;
 
-import com.google.android.play.core.splitinstall.model.SplitInstallErrorCode;
-
 import org.chromium.base.metrics.RecordHistogram;
 
 class SplitInstallFailureLogger {
@@ -38,40 +36,7 @@ class SplitInstallFailureLogger {
     // Keep this one at the end and increment appropriately when adding new status.
     private static final int COUNT = 22;
 
-    private int getHistogramCode(@SplitInstallErrorCode int errorCode) {
-        switch (errorCode) {
-            case SplitInstallErrorCode.NO_ERROR:
-                return NO_ERROR;
-            case SplitInstallErrorCode.ACTIVE_SESSIONS_LIMIT_EXCEEDED:
-                return ACTIVE_SESSIONS_LIMIT_EXCEEDED;
-            case SplitInstallErrorCode.MODULE_UNAVAILABLE:
-                return MODULE_UNAVAILABLE;
-            case SplitInstallErrorCode.INVALID_REQUEST:
-                return INVALID_REQUEST;
-            case SplitInstallErrorCode.SESSION_NOT_FOUND:
-                return SESSION_NOT_FOUND;
-            case SplitInstallErrorCode.API_NOT_AVAILABLE:
-                return API_NOT_AVAILABLE;
-            case SplitInstallErrorCode.NETWORK_ERROR:
-                return NETWORK_ERROR;
-            case SplitInstallErrorCode.ACCESS_DENIED:
-                return ACCESS_DENIED;
-            case SplitInstallErrorCode.INCOMPATIBLE_WITH_EXISTING_SESSION:
-                return INCOMPATIBLE_WITH_EXISTING_SESSION;
-            case SplitInstallErrorCode.SERVICE_DIED:
-                return SERVICE_DIED;
-            case SplitInstallErrorCode.INSUFFICIENT_STORAGE:
-                return INSUFFICIENT_STORAGE;
-            case SplitInstallErrorCode.SPLITCOMPAT_VERIFICATION_ERROR:
-                return SPLITCOMPAT_VERIFICATION_ERROR;
-            case SplitInstallErrorCode.SPLITCOMPAT_EMULATION_ERROR:
-                return SPLITCOMPAT_EMULATION_ERROR;
-            case SplitInstallErrorCode.SPLITCOMPAT_COPY_ERROR:
-                return SPLITCOMPAT_COPY_ERROR;
-            case SplitInstallErrorCode.INTERNAL_ERROR:
-                return INTERNAL_ERROR;
-        }
-
+    private int getHistogramCode(int errorCode) {
         return -1;
     }
 
@@ -87,12 +52,12 @@ class SplitInstallFailureLogger {
         log(moduleName, NO_SPLITCOMPAT);
     }
 
-    public void logStatusFailure(String moduleName, @SplitInstallErrorCode int errorCode) {
+    public void logStatusFailure(String moduleName, int errorCode) {
         Integer code = getHistogramCode(errorCode);
         log(moduleName, code == -1 ? UNKNOWN_SPLITINSTALL_ERROR : code);
     }
 
-    public void logRequestFailure(String moduleName, @SplitInstallErrorCode int errorCode) {
+    public void logRequestFailure(String moduleName, int errorCode) {
         Integer code = getHistogramCode(errorCode);
         log(moduleName, code == -1 ? UNKNOWN_REQUEST_ERROR : code);
     }
--- a/components/module_installer/android/java/src/org/chromium/components/module_installer/logger/SplitInstallStatusLogger.java
+++ b/components/module_installer/android/java/src/org/chromium/components/module_installer/logger/SplitInstallStatusLogger.java
@@ -4,8 +4,6 @@
 
 package org.chromium.components.module_installer.logger;
 
-import com.google.android.play.core.splitinstall.model.SplitInstallSessionStatus;
-
 import org.chromium.base.metrics.RecordHistogram;
 
 class SplitInstallStatusLogger {
@@ -28,32 +26,11 @@ class SplitInstallStatusLogger {
     // Keep this one at the end and increment appropriately when adding new status.
     private static final int COUNT = 12;
 
-    private int getHistogramCode(@SplitInstallSessionStatus int code) {
-        switch (code) {
-            case SplitInstallSessionStatus.PENDING:
-                return PENDING;
-            case SplitInstallSessionStatus.DOWNLOADING:
-                return DOWNLOADING;
-            case SplitInstallSessionStatus.DOWNLOADED:
-                return DOWNLOADED;
-            case SplitInstallSessionStatus.INSTALLING:
-                return INSTALLING;
-            case SplitInstallSessionStatus.INSTALLED:
-                return INSTALLED;
-            case SplitInstallSessionStatus.FAILED:
-                return FAILED;
-            case SplitInstallSessionStatus.CANCELING:
-                return CANCELING;
-            case SplitInstallSessionStatus.CANCELED:
-                return CANCELED;
-            case SplitInstallSessionStatus.REQUIRES_USER_CONFIRMATION:
-                return REQUIRES_USER_CONFIRMATION;
-        }
-
+    private int getHistogramCode(int code) {
         return UNKNOWN_CODE;
     }
 
-    public void logStatusChange(String moduleName, @SplitInstallSessionStatus int status) {
+    public void logStatusChange(String moduleName, int status) {
         recordInstallStatus(moduleName, getHistogramCode(status));
     }
 
--- a/components/module_installer/android/java/src/org/chromium/components/module_installer/util/CrashKeyRecorder.java
+++ b/components/module_installer/android/java/src/org/chromium/components/module_installer/util/CrashKeyRecorder.java
@@ -10,9 +10,6 @@ import android.content.pm.PackageManager
 import android.content.pm.PackageManager.NameNotFoundException;
 import android.text.TextUtils;
 
-import com.google.android.play.core.splitinstall.SplitInstallManager;
-import com.google.android.play.core.splitinstall.SplitInstallManagerFactory;
-
 import org.chromium.base.BuildInfo;
 import org.chromium.base.ContextUtils;
 import org.chromium.components.crash.CrashKeyIndex;
@@ -50,9 +47,6 @@ class CrashKeyRecorder {
         // are emulated. Therefore, use an empty set in that case.
         Set<String> emulatedModules = new TreeSet<>();
         if (SplitCompatInitializer.isInitialized()) {
-            SplitInstallManager manager = SplitInstallManagerFactory.create(context);
-            emulatedModules.addAll(manager.getInstalledModules());
-            emulatedModules.removeAll(fullyInstalledModules);
         }
 
         ck.set(CrashKeyIndex.INSTALLED_MODULES, encodeCrashKeyValue(fullyInstalledModules));
--- a/components/module_installer/android/java/src/org/chromium/components/module_installer/util/SplitCompatInitializer.java
+++ b/components/module_installer/android/java/src/org/chromium/components/module_installer/util/SplitCompatInitializer.java
@@ -4,8 +4,6 @@
 
 package org.chromium.components.module_installer.util;
 
-import com.google.android.play.core.splitcompat.SplitCompat;
-
 import org.chromium.base.ContextUtils;
 import org.chromium.base.StrictModeContext;
 import org.chromium.base.ThreadUtils;
@@ -25,9 +23,8 @@ class SplitCompatInitializer {
 
         // SplitCompat.install may copy modules into Chrome's internal folder or clean them up.
         try (StrictModeContext ignored = StrictModeContext.allowDiskWrites()) {
-            SplitCompat.install(ContextUtils.getApplicationContext());
         }
-        sIsInitialized = true;
+        sIsInitialized = false;
     }
 
     public static boolean isInitialized() {
--- a/components/module_installer/android/BUILD.gn
+++ b/components/module_installer/android/BUILD.gn
@@ -34,7 +34,6 @@ android_library("module_installer_java")
   deps = [
     "//base:base_java",
     "//components/crash/android:java",
-    "//third_party/android_deps:com_google_android_play_core_java",
     "//third_party/androidx:androidx_annotation_annotation_java",
   ]
 
@@ -58,7 +57,6 @@ junit_binary("module_installer_junit_tes
     "//base:base_java",
     "//base:base_java_test_support",
     "//base:base_junit_test_support",
-    "//third_party/android_deps:com_google_android_play_core_java",
     "//third_party/hamcrest:hamcrest_java",
   ]
 }
--- a/chrome/android/BUILD.gn
+++ b/chrome/android/BUILD.gn
@@ -2540,7 +2540,6 @@ android_library("base_module_java") {
     "//components/media_router/browser/android:cast_options_provider_java",
     "//components/minidump_uploader:minidump_uploader_java",
     "//components/module_installer/android:module_installer_java",
-    "//third_party/android_deps:com_google_android_play_core_java",
     "//third_party/androidx:androidx_annotation_annotation_java",
     "//third_party/androidx:androidx_collection_collection_java",
     "//third_party/androidx:androidx_fragment_fragment_java",
--- a/chrome/browser/language/android/BUILD.gn
+++ b/chrome/browser/language/android/BUILD.gn
@@ -15,7 +15,6 @@ android_library("base_module_java") {
     "//base:base_java",
     "//chrome/browser/preferences:java",
     "//components/language/android:java",
-    "//third_party/android_deps:com_google_android_play_core_java",
     "//third_party/androidx:androidx_annotation_annotation_java",
     "//ui/android:ui_no_recycler_view_java",
   ]
--- a/chrome/browser/language/android/java/src/org/chromium/chrome/browser/language/LanguageSplitInstaller.java
+++ b/chrome/browser/language/android/java/src/org/chromium/chrome/browser/language/LanguageSplitInstaller.java
@@ -6,12 +6,6 @@ package org.chromium.chrome.browser.lang
 
 import androidx.annotation.IntDef;
 
-import com.google.android.play.core.splitinstall.SplitInstallManager;
-import com.google.android.play.core.splitinstall.SplitInstallManagerFactory;
-import com.google.android.play.core.splitinstall.SplitInstallRequest;
-import com.google.android.play.core.splitinstall.SplitInstallStateUpdatedListener;
-import com.google.android.play.core.splitinstall.model.SplitInstallSessionStatus;
-
 import org.chromium.base.BundleUtils;
 import org.chromium.base.ContextUtils;
 import org.chromium.base.Log;
@@ -24,6 +18,7 @@ import java.util.Arrays;
 import java.util.HashSet;
 import java.util.Locale;
 import java.util.Set;
+import java.util.HashSet;
 
 /**
  * Singleton class to manage installing language splits. This is temporary to start testing Play
@@ -61,15 +56,11 @@ public class LanguageSplitInstaller {
         void onComplete(boolean success);
     }
 
-    private final SplitInstallStateUpdatedListener mStateUpdateListener = getStatusUpdateListener();
     private InstallListener mInstallListener;
-    private SplitInstallManager mSplitInstallManager;
     private int mInstallSessionId;
     private boolean mIsLanguageSplitInstalled;
 
     private LanguageSplitInstaller() {
-        mSplitInstallManager =
-                SplitInstallManagerFactory.create(ContextUtils.getApplicationContext());
     }
 
     /**
@@ -81,7 +72,7 @@ public class LanguageSplitInstaller {
         if (!BundleUtils.isBundle()) {
             return new HashSet<String>(Arrays.asList(ResourceBundle.getAvailableLocales()));
         }
-        return mSplitInstallManager.getInstalledLanguages();
+        return new HashSet<String>();
     }
 
     /**
@@ -110,24 +101,13 @@ public class LanguageSplitInstaller {
         }
 
         mInstallListener = listener;
-        mSplitInstallManager.registerListener(mStateUpdateListener);
         Locale installLocale = Locale.forLanguageTag(languageName);
 
-        SplitInstallRequest installRequest =
-                SplitInstallRequest.newBuilder().addLanguage(installLocale).build();
-
         mIsLanguageSplitInstalled = isLanguageSplitInstalled(languageName);
-        mSplitInstallManager.startInstall(installRequest)
-                .addOnSuccessListener(sessionId -> { mInstallSessionId = sessionId; })
-                .addOnFailureListener(exception -> {
-                    Log.i(TAG, "Language Split Failure:", exception);
-                    installFinished(false);
-                });
 
         // Schedule a deferred install if the live install fails the play store will install the
         // language split in the background at the next hygiene run. If the install succeeds the
         // deferred install is ignored at the next hygiene run.
-        mSplitInstallManager.deferredLanguageInstall(Arrays.asList(installLocale));
     }
 
     /**
@@ -136,7 +116,6 @@ public class LanguageSplitInstaller {
      */
     private void installFinished(boolean success) {
         mInstallListener.onComplete(success);
-        mSplitInstallManager.unregisterListener(mStateUpdateListener);
         mInstallListener = null;
         mInstallSessionId = 0;
         mIsLanguageSplitInstalled = false;
@@ -147,50 +126,18 @@ public class LanguageSplitInstaller {
      * @return True if status is a final state for the split install. |SplitInstallSessionStatus|
      * has values for intermediate states such as Pending and Installing which are not final states.
      */
-    private boolean isStatusFinalState(@SplitInstallSessionStatus int status) {
-        if (status == SplitInstallSessionStatus.INSTALLED
-                || status == SplitInstallSessionStatus.FAILED
-                || status == SplitInstallSessionStatus.CANCELED
-                || status == SplitInstallSessionStatus.DOWNLOADED) {
-            return true;
-        }
-        return false;
-    }
 
     /**
      * Make a SplitInstallStateUpdateListener that responds once the download has been installed or
      * fails.
      */
-    private SplitInstallStateUpdatedListener getStatusUpdateListener() {
-        return state -> { // Lambda for SplitInstallStatusUpdateListener.onStateUpdate.
-            if (state.sessionId() != mInstallSessionId) return;
-
-            int status = state.status();
-            if (isStatusFinalState(status)) {
-                recordLanguageSplitInstallStatus(status);
-                installFinished(status == SplitInstallSessionStatus.INSTALLED);
-            }
-        };
-    }
 
     private @LanguageSplitInstallStatus int getEnumCodeFromStatus(
-            @SplitInstallSessionStatus int status) {
-        switch (status) {
-            case SplitInstallSessionStatus.INSTALLED:
-                return (mIsLanguageSplitInstalled) ? LanguageSplitInstallStatus.ALREADY_INSTALLED
-                                                   : LanguageSplitInstallStatus.SUCCESS;
-            case SplitInstallSessionStatus.CANCELED:
-                return LanguageSplitInstallStatus.CANCELED;
-            case SplitInstallSessionStatus.DOWNLOADED:
-                return LanguageSplitInstallStatus.DOWNLOADED;
-            case SplitInstallSessionStatus.FAILED:
-                return LanguageSplitInstallStatus.FAILED;
-            default:
-                return LanguageSplitInstallStatus.UNEXPECTED_STATUS;
-        }
+            int status) {
+        return -1;
     }
 
-    private void recordLanguageSplitInstallStatus(@SplitInstallSessionStatus int status) {
+    private void recordLanguageSplitInstallStatus(int status) {
         @LanguageSplitInstallStatus
         int enumCode = getEnumCodeFromStatus(status);
         RecordHistogram.recordEnumeratedHistogram("LanguageSettings.SplitInstallFinalStatus",
