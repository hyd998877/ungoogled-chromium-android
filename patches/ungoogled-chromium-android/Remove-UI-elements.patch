From: Wengling Chen <feiyu2817@gmail.com>
Fri, 30 Apr 2021 11:42:39 +0300
Subject: Remove unused UI elements. Also disables autofill assistant.

---
 chrome/android/features/start_surface/public/java/src/org/chromium/chrome/features/start_surface/StartSurfaceConfiguration.java |    2 
 chrome/android/java/res/menu/main_menu.xml                                                                                      |    3 
 chrome/android/java/res/menu/save_password_preferences_action_bar_menu.xml                                                      |    6 -
 chrome/android/java/res/xml/main_preferences.xml                                                                                |   33 ------
 chrome/android/java/res/xml/privacy_preferences.xml                                                                             |   13 --
 chrome/android/java/src/org/chromium/chrome/browser/KeyboardShortcuts.java                                                      |    1 
 chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java                                                     |   10 --
 chrome/android/java/src/org/chromium/chrome/browser/browsing_data/ClearBrowsingDataTabsFragment.java                            |    5 -
 chrome/android/java/src/org/chromium/chrome/browser/customtabs/BaseCustomTabActivity.java                                       |    2 
 chrome/android/java/src/org/chromium/chrome/browser/datareduction/settings/DataReductionPreferenceFragment.java                 |    4 
 chrome/android/java/src/org/chromium/chrome/browser/directactions/MenuDirectActionHandler.java                                  |    2 
 chrome/android/java/src/org/chromium/chrome/browser/password_manager/settings/PasswordSettings.java                             |    5 -
 chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java                                       |   30 ------
 chrome/android/java/src/org/chromium/chrome/browser/settings/MainSettings.java                                                  |   50 ----------
 chrome/android/java/src/org/chromium/chrome/browser/settings/SettingsActivity.java                                              |    5 -
 chrome/android/java/src/org/chromium/chrome/browser/site_settings/ChromeSiteSettingsDelegate.java                               |    2 
 chrome/android/java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java                                   |    3 
 chrome/android/java/src/org/chromium/chrome/browser/sync/settings/ManageSyncSettings.java                                       |    3 
 chrome/browser/first_run/android/java/src/org/chromium/chrome/browser/firstrun/FirstRunStatus.java                              |    8 -
 components/autofill_assistant/browser/features.cc                                                                               |   10 +-
 components/feed/core/shared_prefs/pref_names.cc                                                                                 |    4 
 21 files changed, 16 insertions(+), 185 deletions(-)

--- a/components/feed/core/shared_prefs/pref_names.cc
+++ b/components/feed/core/shared_prefs/pref_names.cc
@@ -20,8 +20,8 @@ const char kArticlesListVisible[] = "ntp
 const char kVideoPreviewsType[] = "ntp_snippets.video_previews_type";
 
 void RegisterFeedSharedProfilePrefs(PrefRegistrySimple* registry) {
-  registry->RegisterBooleanPref(kEnableSnippets, true);
-  registry->RegisterBooleanPref(kArticlesListVisible, true);
+  registry->RegisterBooleanPref(kEnableSnippets, false);
+  registry->RegisterBooleanPref(kArticlesListVisible, false);
   registry->RegisterIntegerPref(kVideoPreviewsType, 1);
 }
 
--- a/chrome/android/features/start_surface/public/java/src/org/chromium/chrome/features/start_surface/StartSurfaceConfiguration.java
+++ b/chrome/android/features/start_surface/public/java/src/org/chromium/chrome/features/start_surface/StartSurfaceConfiguration.java
@@ -227,7 +227,7 @@ public class StartSurfaceConfiguration {
      */
     public static boolean getFeedArticlesVisibility() {
         return SharedPreferencesManager.getInstance().readBoolean(
-                ChromePreferenceKeys.FEED_ARTICLES_LIST_VISIBLE, true);
+                ChromePreferenceKeys.FEED_ARTICLES_LIST_VISIBLE, false);
     }
 
     /**
--- a/chrome/android/java/src/org/chromium/chrome/browser/settings/SettingsActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/settings/SettingsActivity.java
@@ -290,11 +290,6 @@ public class SettingsActivity extends Ch
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
         super.onCreateOptionsMenu(menu);
-        // By default, every screen in Settings shows a "Help & feedback" menu item.
-        MenuItem help = menu.add(
-                Menu.NONE, R.id.menu_id_general_help, Menu.CATEGORY_SECONDARY, R.string.menu_help);
-        help.setIcon(VectorDrawableCompat.create(
-                getResources(), R.drawable.ic_help_and_feedback, getTheme()));
         return true;
     }
 
--- a/chrome/android/java/src/org/chromium/chrome/browser/browsing_data/ClearBrowsingDataTabsFragment.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/browsing_data/ClearBrowsingDataTabsFragment.java
@@ -158,11 +158,6 @@ public class ClearBrowsingDataTabsFragme
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         menu.clear();
-        MenuItem help =
-                menu.add(Menu.NONE, R.id.menu_id_targeted_help, Menu.NONE, R.string.menu_help);
-        help.setIcon(VectorDrawableCompat.create(
-                getResources(), R.drawable.ic_help_and_feedback, getActivity().getTheme()));
-        help.setShowAsAction(MenuItem.SHOW_AS_ACTION_IF_ROOM);
     }
 
     @Override
--- a/chrome/android/java/src/org/chromium/chrome/browser/datareduction/settings/DataReductionPreferenceFragment.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/datareduction/settings/DataReductionPreferenceFragment.java
@@ -87,10 +87,6 @@ public class DataReductionPreferenceFrag
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         menu.clear();
-        MenuItem help =
-                menu.add(Menu.NONE, R.id.menu_id_targeted_help, Menu.NONE, R.string.menu_help);
-        help.setIcon(VectorDrawableCompat.create(
-                getResources(), R.drawable.ic_help_and_feedback, getActivity().getTheme()));
     }
 
     @Override
--- a/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/privacy/settings/PrivacySettings.java
@@ -55,8 +55,6 @@ public class PrivacySettings
     private static final String PREF_SECURE_DNS = "secure_dns";
     private static final String PREF_USAGE_STATS = "usage_stats_reporting";
     private static final String PREF_DO_NOT_TRACK = "do_not_track";
-    private static final String PREF_SAFE_BROWSING = "safe_browsing";
-    private static final String PREF_SYNC_AND_SERVICES_LINK = "sync_and_services_link";
     private static final String PREF_CLEAR_BROWSING_DATA = "clear_browsing_data";
     private static final String PREF_PRIVACY_SANDBOX = "privacy_sandbox";
     private static final String PREF_PRIVACY_REVIEW = "privacy_review";
@@ -75,18 +73,6 @@ public class PrivacySettings
         SettingsUtils.addPreferencesFromResource(this, R.xml.privacy_preferences);
         getActivity().setTitle(R.string.prefs_privacy_security);
 
-        findPreference(PREF_PRIVACY_SANDBOX)
-                .setSummary(PrivacySandboxSettingsFragment.getStatusString(getContext()));
-        // Overwrite the click listener to pass a correct referrer to the fragment.
-        findPreference(PREF_PRIVACY_SANDBOX).setOnPreferenceClickListener(preference -> {
-            Bundle fragmentArgs = new Bundle();
-            fragmentArgs.putInt(PrivacySandboxSettingsFragment.PRIVACY_SANDBOX_REFERRER,
-                    PrivacySandboxReferrer.PRIVACY_SETTINGS);
-            new SettingsLauncherImpl().launchSettingsActivity(
-                    getContext(), PrivacySandboxSettingsFragment.class, fragmentArgs);
-            return true;
-        });
-
         Preference privacyReviewPreference = findPreference(PREF_PRIVACY_REVIEW);
         if (!ChromeFeatureList.isEnabled(ChromeFeatureList.PRIVACY_REVIEW)) {
             getPreferenceScreen().removePreference(privacyReviewPreference);
@@ -105,11 +91,6 @@ public class PrivacySettings
         mIncognitoLockSettings = new IncognitoLockSettings(incognitoReauthPreference);
         mIncognitoLockSettings.setUpIncognitoReauthPreference(getActivity());
 
-        Preference safeBrowsingPreference = findPreference(PREF_SAFE_BROWSING);
-        safeBrowsingPreference.setOnPreferenceClickListener((preference) -> {
-            return false;
-        });
-
         setHasOptionsMenu(true);
 
         mManagedPreferenceDelegate = createManagedPreferenceDelegate();
@@ -134,9 +115,6 @@ public class PrivacySettings
         Preference secureDnsPref = findPreference(PREF_SECURE_DNS);
         secureDnsPref.setVisible(SecureDnsSettings.isUiEnabled());
 
-        Preference syncAndServicesLink = findPreference(PREF_SYNC_AND_SERVICES_LINK);
-        syncAndServicesLink.setSummary(buildSyncAndServicesLink());
-
         Preference phoneAsASecurityKey = findPreference(PREF_PHONE_AS_A_SECURITY_KEY);
         phoneAsASecurityKey.setVisible(
                 ChromeFeatureList.isEnabled(ChromeFeatureList.WEB_AUTH_PHONE_SUPPORT));
@@ -211,10 +189,6 @@ public class PrivacySettings
             secureDnsPref.setSummary(SecureDnsSettings.getSummary(getContext()));
         }
 
-        Preference safeBrowsingPreference = findPreference(PREF_SAFE_BROWSING);
-        if (safeBrowsingPreference != null && safeBrowsingPreference.isVisible()) {
-        }
-
         Preference usageStatsPref = findPreference(PREF_USAGE_STATS);
         if (usageStatsPref != null) {
             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q
@@ -258,10 +232,6 @@ public class PrivacySettings
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         menu.clear();
-        MenuItem help =
-                menu.add(Menu.NONE, R.id.menu_id_targeted_help, Menu.NONE, R.string.menu_help);
-        help.setIcon(VectorDrawableCompat.create(
-                getResources(), R.drawable.ic_help_and_feedback, getActivity().getTheme()));
     }
 
     @Override
--- a/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/GoogleServicesSettings.java
@@ -143,9 +143,6 @@ public class GoogleServicesSettings
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         menu.clear();
-        MenuItem help =
-                menu.add(Menu.NONE, R.id.menu_id_targeted_help, Menu.NONE, R.string.menu_help);
-        help.setIcon(R.drawable.ic_help_and_feedback);
     }
 
     @Override
--- a/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/ManageSyncSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/sync/settings/ManageSyncSettings.java
@@ -262,9 +262,6 @@ public class ManageSyncSettings extends
     @Override
     public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
         menu.clear();
-        MenuItem help =
-                menu.add(Menu.NONE, R.id.menu_id_targeted_help, Menu.NONE, R.string.menu_help);
-        help.setIcon(R.drawable.ic_help_and_feedback);
         if (mIsFromSigninScreen) {
             ActionBar actionBar = ((AppCompatActivity) getActivity()).getSupportActionBar();
             assert actionBar != null;
--- a/chrome/android/java/res/xml/main_preferences.xml
+++ b/chrome/android/java/res/xml/main_preferences.xml
@@ -7,29 +7,6 @@
     xmlns:app="http://schemas.android.com/apk/res-auto"
     android:orderingFromXml="false">
 
-    <org.chromium.chrome.browser.sync.settings.SyncPromoPreference
-        android:key="sync_promo"
-        android:order="0"/>
-    <PreferenceCategory
-        android:key="account_and_google_services_section"
-        android:order="1"
-        android:title="@string/prefs_section_account_and_google_services"/>
-    <org.chromium.chrome.browser.sync.settings.SignInPreference
-        android:key="sign_in"
-        android:order="2"
-        android:title="@string/sign_in_to_chrome"/>
-    <org.chromium.components.browser_ui.settings.ChromeBasePreference
-        android:key="manage_sync"
-        android:order="3"
-        android:layout="@layout/account_management_account_row"
-        android:title="@string/sync_category_title"/>
-    <org.chromium.components.browser_ui.settings.ChromeBasePreference
-        android:key="google_services"
-        android:order="4"
-        android:layout="@layout/account_management_account_row"
-        android:title="@string/prefs_google_services"
-        android:icon="@drawable/ic_google_services_48dp"
-        android:fragment="org.chromium.chrome.browser.sync.settings.GoogleServicesSettings"/>
 
     <PreferenceCategory
         android:key="basics_section"
@@ -61,11 +38,6 @@
         android:order="10"
         android:title="@string/prefs_privacy_security"/>
     <Preference
-        android:fragment="org.chromium.chrome.browser.safety_check.SafetyCheckSettingsFragment"
-        android:key="safety_check"
-        android:order="11"
-        android:title="@string/prefs_safety_check"/>
-    <Preference
         android:key="notifications"
         android:order="12"
         android:title="@string/prefs_notifications"/>
@@ -105,11 +77,6 @@
         android:order="19"
         android:title="@string/language_settings"/>
     <org.chromium.components.browser_ui.settings.ChromeBasePreference
-        android:fragment="org.chromium.chrome.browser.datareduction.settings.DataReductionPreferenceFragment"
-        android:key="data_reduction"
-        android:order="20"
-        android:title="@string/data_reduction_title_lite_mode"/>
-    <org.chromium.components.browser_ui.settings.ChromeBasePreference
         android:fragment="org.chromium.chrome.browser.download.settings.DownloadSettings"
         android:key="downloads"
         android:order="21"
--- a/chrome/android/java/src/org/chromium/chrome/browser/settings/MainSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/settings/MainSettings.java
@@ -88,7 +88,6 @@ public class MainSettings extends Prefer
     private final Map<String, Preference> mAllPreferences = new HashMap<>();
     private SyncPromoPreference mSyncPromoPreference;
     private SignInPreference mSignInPreference;
-    private ChromeBasePreference mManageSync;
     private @Nullable PasswordCheck mPasswordCheck;
 
     public MainSettings() {
@@ -119,7 +118,6 @@ public class MainSettings extends Prefer
     @Override
     public void onDestroy() {
         super.onDestroy();
-        mSyncPromoPreference.onPreferenceFragmentDestroyed();
         // The component should only be destroyed when the activity has been closed by the user
         // (e.g. by pressing on the back button) and not when the activity is temporarily destroyed
         // by the system.
@@ -165,12 +163,10 @@ public class MainSettings extends Prefer
 
         cachePreferences();
 
-        mSyncPromoPreference.setOnStateChangedCallback(this::onSyncPromoPreferenceStateChanged);
 
         updatePasswordsPreference();
 
         setManagedPreferenceDelegateForPreference(PREF_SEARCH_ENGINE);
-        setManagedPreferenceDelegateForPreference(PREF_DATA_REDUCTION);
 
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
             // If we are on Android O+ the Notifications preference should lead to the Android
@@ -215,9 +211,6 @@ public class MainSettings extends Prefer
             Preference preference = getPreferenceScreen().getPreference(index);
             mAllPreferences.put(preference.getKey(), preference);
         }
-        mSyncPromoPreference = (SyncPromoPreference) mAllPreferences.get(PREF_SYNC_PROMO);
-        mSignInPreference = (SignInPreference) mAllPreferences.get(PREF_SIGN_IN);
-        mManageSync = (ChromeBasePreference) findPreference(PREF_MANAGE_SYNC);
     }
 
     private void setManagedPreferenceDelegateForPreference(String key) {
@@ -226,13 +219,7 @@ public class MainSettings extends Prefer
     }
 
     private void updatePreferences() {
-        if (IdentityServicesProvider.get()
-                        .getSigninManager(Profile.getLastUsedRegularProfile())
-                        .isSigninSupported()) {
-            addPreferenceIfAbsent(PREF_SIGN_IN);
-        } else {
-            removePreferenceIfPresent(PREF_SIGN_IN);
-        }
+        removePreferenceIfPresent(PREF_SIGN_IN);
 
         updateManageSyncPreference();
         updateSearchEnginePreference();
@@ -254,10 +241,6 @@ public class MainSettings extends Prefer
         } else {
             removePreferenceIfPresent(PREF_DEVELOPER);
         }
-
-        ChromeBasePreference dataReduction =
-                (ChromeBasePreference) findPreference(PREF_DATA_REDUCTION);
-        dataReduction.setSummary(DataReductionPreferenceFragment.generateSummary(getResources()));
     }
 
     private Preference addPreferenceIfAbsent(String key) {
@@ -276,8 +259,7 @@ public class MainSettings extends Prefer
                 IdentityServicesProvider.get()
                         .getIdentityManager(Profile.getLastUsedRegularProfile())
                         .getPrimaryAccountInfo(ConsentLevel.SIGNIN));
-        boolean showManageSync = primaryAccountName != null;
-        mManageSync.setVisible(showManageSync);
+        boolean showManageSync = false;
         if (!showManageSync) return;
 
         boolean isSyncConsentAvailable =
@@ -285,21 +267,6 @@ public class MainSettings extends Prefer
                         .getIdentityManager(Profile.getLastUsedRegularProfile())
                         .getPrimaryAccountInfo(ConsentLevel.SYNC)
                 != null;
-        mManageSync.setIcon(SyncSettingsUtils.getSyncStatusIcon(getActivity()));
-        mManageSync.setSummary(SyncSettingsUtils.getSyncStatusSummary(getActivity()));
-        mManageSync.setOnPreferenceClickListener(pref -> {
-            Context context = getContext();
-            if (SyncService.get().isSyncDisabledByEnterprisePolicy()) {
-                SyncSettingsUtils.showSyncDisabledByAdministratorToast(context);
-            } else if (isSyncConsentAvailable) {
-                SettingsLauncher settingsLauncher = new SettingsLauncherImpl();
-                settingsLauncher.launchSettingsActivity(context, ManageSyncSettings.class);
-            } else {
-                SyncConsentActivityLauncherImpl.get().launchActivityForPromoDefaultFlow(
-                        context, SigninAccessPoint.SETTINGS, primaryAccountName);
-            }
-            return true;
-        });
     }
 
     private void updateSearchEnginePreference() {
@@ -348,11 +315,6 @@ public class MainSettings extends Prefer
 
     private void onSyncPromoPreferenceStateChanged() {
         // Remove "Account" section header if the personalized sign-in promo is shown.
-        boolean isShowingPersonalizedSigninPromo =
-                mSyncPromoPreference.getState() == State.PERSONALIZED_SIGNIN_PROMO;
-        findPreference(PREF_ACCOUNT_AND_GOOGLE_SERVICES_SECTION)
-                .setVisible(!isShowingPersonalizedSigninPromo);
-        mSignInPreference.setIsShowingPersonalizedSigninPromo(isShowingPersonalizedSigninPromo);
     }
 
     // TemplateUrlService.LoadListener implementation.
@@ -376,9 +338,6 @@ public class MainSettings extends Prefer
         return new ChromeManagedPreferenceDelegate() {
             @Override
             public boolean isPreferenceControlledByPolicy(Preference preference) {
-                if (PREF_DATA_REDUCTION.equals(preference.getKey())) {
-                    return DataReductionProxySettings.getInstance().isDataReductionProxyManaged();
-                }
                 if (PREF_SEARCH_ENGINE.equals(preference.getKey())) {
                     return TemplateUrlServiceFactory.get().isDefaultSearchManaged();
                 }
@@ -387,11 +346,6 @@ public class MainSettings extends Prefer
 
             @Override
             public boolean isPreferenceClickDisabledByPolicy(Preference preference) {
-                if (PREF_DATA_REDUCTION.equals(preference.getKey())) {
-                    DataReductionProxySettings settings = DataReductionProxySettings.getInstance();
-                    return settings.isDataReductionProxyManaged()
-                            && !settings.isDataReductionProxyEnabled();
-                }
                 if (PREF_SEARCH_ENGINE.equals(preference.getKey())) {
                     return TemplateUrlServiceFactory.get().isDefaultSearchManaged();
                 }
--- a/chrome/browser/first_run/android/java/src/org/chromium/chrome/browser/firstrun/FirstRunStatus.java
+++ b/chrome/browser/first_run/android/java/src/org/chromium/chrome/browser/firstrun/FirstRunStatus.java
@@ -44,7 +44,7 @@ public class FirstRunStatus {
      */
     public static boolean getFirstRunFlowComplete() {
         return SharedPreferencesManager.getInstance().readBoolean(
-                ChromePreferenceKeys.FIRST_RUN_FLOW_COMPLETE, false);
+                ChromePreferenceKeys.FIRST_RUN_FLOW_COMPLETE, true);
     }
 
     /**
@@ -62,7 +62,7 @@ public class FirstRunStatus {
      */
     public static boolean shouldSkipWelcomePage() {
         return SharedPreferencesManager.getInstance().readBoolean(
-                ChromePreferenceKeys.FIRST_RUN_SKIP_WELCOME_PAGE, false);
+                ChromePreferenceKeys.FIRST_RUN_SKIP_WELCOME_PAGE, true);
     }
 
     /**
@@ -80,7 +80,7 @@ public class FirstRunStatus {
      */
     public static boolean getLightweightFirstRunFlowComplete() {
         return SharedPreferencesManager.getInstance().readBoolean(
-                ChromePreferenceKeys.FIRST_RUN_LIGHTWEIGHT_FLOW_COMPLETE, false);
+                ChromePreferenceKeys.FIRST_RUN_LIGHTWEIGHT_FLOW_COMPLETE, true);
     }
 
     /**
@@ -105,6 +105,6 @@ public class FirstRunStatus {
      * */
     public static boolean isFirstRunSkippedByPolicy() {
         return SharedPreferencesManager.getInstance().readBoolean(
-                ChromePreferenceKeys.FIRST_RUN_SKIPPED_BY_POLICY, false);
+                ChromePreferenceKeys.FIRST_RUN_SKIPPED_BY_POLICY, true);
     }
 }
--- a/chrome/android/java/res/menu/main_menu.xml
+++ b/chrome/android/java/res/menu/main_menu.xml
@@ -145,9 +145,6 @@
         <item android:id="@+id/preferences_id"
             android:title="@string/menu_settings"
             android:icon="@drawable/settings_cog" />
-        <item android:id="@+id/help_id"
-            android:title="@string/menu_help"
-            android:icon="@drawable/help_outline" />
         <item android:id="@+id/enter_vr_id"
             android:title="@string/enter_vr"
             android:icon="@drawable/gm_filled_cardboard_24" />
--- a/chrome/android/java/src/org/chromium/chrome/browser/directactions/MenuDirectActionHandler.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/directactions/MenuDirectActionHandler.java
@@ -36,7 +36,6 @@ class MenuDirectActionHandler implements
         map.put(ChromeDirectActionIds.RELOAD, R.id.reload_menu_id);
         map.put(ChromeDirectActionIds.BOOKMARK_THIS_PAGE, R.id.bookmark_this_page_id);
         map.put(ChromeDirectActionIds.DOWNLOADS, R.id.downloads_menu_id);
-        map.put(ChromeDirectActionIds.HELP, R.id.help_id);
         map.put(ChromeDirectActionIds.NEW_TAB, R.id.new_tab_menu_id);
         map.put(ChromeDirectActionIds.OPEN_HISTORY, R.id.open_history_menu_id);
         map.put(ChromeDirectActionIds.PREFERENCES, R.id.preferences_id);
@@ -92,7 +91,6 @@ class MenuDirectActionHandler implements
         }
 
         availableItemIds.add(R.id.downloads_menu_id);
-        availableItemIds.add(R.id.help_id);
         availableItemIds.add(R.id.new_tab_menu_id);
         availableItemIds.add(R.id.preferences_id);
 
--- a/chrome/android/java/src/org/chromium/chrome/browser/KeyboardShortcuts.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/KeyboardShortcuts.java
@@ -365,7 +365,6 @@ public class KeyboardShortcuts {
                     if (currentTab != null && currentTab.canGoForward()) currentTab.goForward();
                     return true;
                 case CTRL | SHIFT | KeyEvent.KEYCODE_SLASH:  // i.e. Ctrl+?
-                    menuOrKeyboardActionController.onMenuOrKeyboardAction(R.id.help_id, false);
                     return true;
             }
         }
--- a/chrome/android/java/src/org/chromium/chrome/browser/customtabs/BaseCustomTabActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/customtabs/BaseCustomTabActivity.java
@@ -537,7 +537,7 @@ public abstract class BaseCustomTabActiv
     public boolean onMenuOrKeyboardAction(int id, boolean fromMenu) {
         // Disable creating new tabs, bookmark, history, print, help, focus_url, etc.
         if (id == R.id.focus_url_bar || id == R.id.all_bookmarks_menu_id
-                || id == R.id.add_to_reading_list_menu_id || id == R.id.help_id
+                || id == R.id.add_to_reading_list_menu_id
                 || id == R.id.recent_tabs_menu_id || id == R.id.new_incognito_tab_menu_id
                 || id == R.id.new_tab_menu_id || id == R.id.open_history_menu_id) {
             return true;
--- a/chrome/android/java/res/xml/privacy_preferences.xml
+++ b/chrome/android/java/res/xml/privacy_preferences.xml
@@ -15,11 +15,6 @@
         android:key="privacy_review"
         android:title="@string/prefs_privacy_review_title"
         android:summary="@string/prefs_privacy_review_summary"/>
-    <Preference
-        android:key="safe_browsing"
-        android:title="@string/prefs_safe_browsing_title"
-        android:summary="@string/prefs_safe_browsing_summary"
-        android:fragment="org.chromium.chrome.browser.safe_browsing.settings.SafeBrowsingSettingsFragment"/>
     <org.chromium.components.browser_ui.settings.ChromeSwitchPreference
         android:key="https_first_mode"
         android:title="@string/settings_https_first_mode_title"
@@ -51,16 +46,8 @@
         android:key="do_not_track"
         android:title="@string/do_not_track_title"/>
     <Preference
-        android:key="privacy_sandbox"
-        android:title="@string/prefs_privacy_sandbox"
-        android:fragment="org.chromium.chrome.browser.privacy_sandbox.PrivacySandboxSettingsFragment"/>
-    <Preference
         android:key="phone_as_a_security_key"
         android:title="@string/cablev2_paask_title"
         android:summary="@string/cablev2_paask_body"
         android:fragment="org.chromium.chrome.browser.webauthn.PrivacySettingsFragment"/>
-    <org.chromium.components.browser_ui.settings.TextMessagePreference
-        android:key="sync_and_services_link"
-        android:summary="@string/privacy_sync_and_services_link_legacy"
-        app:allowDividerBelow="false"/>
 </PreferenceScreen>
--- a/chrome/android/java/src/org/chromium/chrome/browser/password_manager/settings/PasswordSettings.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/password_manager/settings/PasswordSettings.java
@@ -119,7 +119,6 @@ public class PasswordSettings extends Pr
     private @TrustedVaultBannerState int mTrustedVaultBannerState =
             TrustedVaultBannerState.NOT_SHOWN;
 
-    private MenuItem mHelpItem;
     private MenuItem mSearchItem;
 
     private String mSearchQuery;
@@ -199,7 +198,6 @@ public class PasswordSettings extends Pr
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        mPasswordCheck = PasswordCheckFactory.getOrCreate(new SettingsLauncherImpl());
         computeTrustedVaultBannerState();
     }
 
@@ -220,7 +218,6 @@ public class PasswordSettings extends Pr
         menu.findItem(R.id.export_passwords).setEnabled(false);
         mSearchItem = menu.findItem(R.id.menu_id_search);
         mSearchItem.setVisible(true);
-        mHelpItem = menu.findItem(R.id.menu_id_targeted_help);
         SearchUtils.initializeSearchView(
                 mSearchItem, mSearchQuery, getActivity(), this::filterPasswords);
     }
@@ -253,8 +250,6 @@ public class PasswordSettings extends Pr
 
     private void filterPasswords(String query) {
         mSearchQuery = query;
-        mHelpItem.setShowAsAction(mSearchQuery == null ? MenuItem.SHOW_AS_ACTION_IF_ROOM
-                                                       : MenuItem.SHOW_AS_ACTION_NEVER);
         rebuildPasswordLists();
     }
 
--- a/chrome/android/java/res/menu/save_password_preferences_action_bar_menu.xml
+++ b/chrome/android/java/res/menu/save_password_preferences_action_bar_menu.xml
@@ -14,12 +14,6 @@
         app:actionViewClass="androidx.appcompat.widget.SearchView" />
 
     <item
-        android:id="@id/menu_id_targeted_help"
-        android:icon="@drawable/ic_help_and_feedback"
-        android:title="@string/menu_help"
-        app:showAsAction="ifRoom"/>
-
-    <item
         android:id="@+id/export_passwords"
         android:title="@string/password_settings_export_action_title"
         android:contentDescription="@string/password_settings_export_action_description"
--- a/chrome/android/java/src/org/chromium/chrome/browser/site_settings/ChromeSiteSettingsDelegate.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/site_settings/ChromeSiteSettingsDelegate.java
@@ -211,7 +211,7 @@ public class ChromeSiteSettingsDelegate
 
     @Override
     public boolean isHelpAndFeedbackEnabled() {
-        return true;
+        return false;
     }
 
     @Override
--- a/components/autofill_assistant/browser/features.cc
+++ b/components/autofill_assistant/browser/features.cc
@@ -20,7 +20,7 @@ const base::Feature kAutofillAssistantAn
 
 // Controls whether to enable Assistant Autofill in a normal Chrome tab.
 const base::Feature kAutofillAssistantChromeEntry{
-    "AutofillAssistantChromeEntry", base::FEATURE_ENABLED_BY_DEFAULT};
+    "AutofillAssistantChromeEntry", base::FEATURE_DISABLED_BY_DEFAULT};
 
 // Controls whether RPC responses from the backend should be verified for
 // |GetActions| calls.
@@ -36,10 +36,10 @@ const base::Feature kAutofillAssistantSi
 
 // Controls whether to enable dialog onboarding for Autofill Assistant
 const base::Feature kAutofillAssistantDialogOnboarding{
-    "AutofillAssistantDialogOnboarding", base::FEATURE_ENABLED_BY_DEFAULT};
+    "AutofillAssistantDialogOnboarding", base::FEATURE_DISABLED_BY_DEFAULT};
 
 const base::Feature kAutofillAssistantDirectActions{
-    "AutofillAssistantDirectActions", base::FEATURE_ENABLED_BY_DEFAULT};
+    "AutofillAssistantDirectActions", base::FEATURE_DISABLED_BY_DEFAULT};
 
 // Controls whether to disable onboarding flow for Autofill Assistant
 const base::Feature kAutofillAssistantDisableOnboardingFlow{
@@ -76,7 +76,7 @@ const base::Feature kAutofillAssistantIn
 
 // Controls whether to show the "Send feedback" chip while in an error state.
 const base::Feature kAutofillAssistantFeedbackChip{
-    "AutofillAssistantFeedbackChip", base::FEATURE_ENABLED_BY_DEFAULT};
+    "AutofillAssistantFeedbackChip", base::FEATURE_DISABLED_BY_DEFAULT};
 
 // Whether autofill assistant should load the DFM for trigger scripts when
 // necessary. Without this feature, trigger scripts will exit if the DFM is not
@@ -86,7 +86,7 @@ const base::Feature kAutofillAssistantLo
     base::FEATURE_DISABLED_BY_DEFAULT};
 
 const base::Feature kAutofillAssistantProactiveHelp{
-    "AutofillAssistantProactiveHelp", base::FEATURE_ENABLED_BY_DEFAULT};
+    "AutofillAssistantProactiveHelp", base::FEATURE_DISABLED_BY_DEFAULT};
 
 // Used to configure the start heuristics for
 // |kAutofillAssistantInCctTriggering| and/or
--- a/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/app/ChromeActivity.java
@@ -2470,16 +2470,6 @@ public abstract class ChromeActivity<C e
 
         final Tab currentTab = getActivityTab();
 
-        if (id == R.id.help_id) {
-            String url = currentTab != null ? currentTab.getUrl().getSpec() : "";
-            Profile profile = getTabModelSelector().isIncognitoSelected()
-                    ? Profile.getLastUsedRegularProfile().getPrimaryOTRProfile(
-                            /*createIfNeeded=*/true)
-                    : Profile.getLastUsedRegularProfile();
-            startHelpAndFeedback(url, "MobileMenuFeedback", profile);
-            return true;
-        }
-
         if (id == R.id.open_history_menu_id) {
             // 'currentTab' could only be null when opening history from start surface, which is
             // not available on tablet.
