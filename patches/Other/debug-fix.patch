From: Wengling Chen <feiyu2817@gmail.com>
Date: Tue, 26 May 2020 22:31:34 -0400
Subject: Remove DCHECK and other lines causing Debug builds to fail

---
 base/logging.cc                                                                     |    2 -
 base/supports_user_data.cc                                                          |    4 +-
 build/config/compiler/BUILD.gn                                                      |    9 ++----
 components/omnibox/browser/autocomplete_controller.cc                               |    3 --
 components/omnibox/browser/autocomplete_match.cc                                    |   10 -------
 components/omnibox/browser/autocomplete_result.cc                                   |    7 -----
 components/omnibox/browser/shortcuts_backend.cc                                     |    3 --
 components/policy/core/browser/configuration_policy_handler.cc                      |    1 
 components/signin/internal/identity_manager/primary_account_manager.cc              |   14 ----------
 components/signin/internal/identity_manager/profile_oauth2_token_service_builder.cc |    1 
 content/common/input/input_event_stream_validator.cc                                |    3 --
 services/network/network_context.cc                                                 |    1 
 url/gurl.cc                                                                         |    2 -
 13 files changed, 7 insertions(+), 53 deletions(-)

--- a/components/signin/internal/identity_manager/primary_account_manager.cc
+++ b/components/signin/internal/identity_manager/primary_account_manager.cc
@@ -146,18 +146,6 @@ void PrimaryAccountManager::SetSyncPrima
   DCHECK(!account_info.account_id.empty());
   DCHECK(!HasPrimaryAccount(signin::ConsentLevel::kSync));
 
-#if DCHECK_IS_ON()
-  {
-    std::string pref_account_id;
-    bool consented_to_sync =
-        client_->GetPrefs()->GetBoolean(prefs::kGoogleServicesConsentedToSync);
-
-    DCHECK(pref_account_id.empty() || !consented_to_sync ||
-           pref_account_id == account_info.account_id.ToString())
-        << "account_id=" << account_info.account_id
-        << " pref_account_id=" << pref_account_id;
-  }
-#endif  // DCHECK_IS_ON()
 
   SetPrimaryAccountInternal(account_info, /*consented_to_sync=*/true);
 
@@ -361,7 +349,5 @@ void PrimaryAccountManager::OnRefreshTok
     account_tracker_service_->SetMigrationDone();
     client_->GetPrefs()->CommitPendingWrite();
   }
-  DCHECK_EQ(AccountTrackerService::MIGRATION_DONE,
-            account_tracker_service_->GetMigrationState());
 #endif  // !BUILDFLAG(IS_CHROMEOS_ASH)
 }
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -259,7 +259,7 @@ config("compiler") {
   cflags_cc = []
   cflags_objc = []
   cflags_objcc = []
-  ldflags = []
+  ldflags = [ "-Wl,-error-limit=0",  "-Wl,--gc-sections", "-fdata-sections", "-ffunction-sections", "-Wl,--gdb-index", ]
   defines = []
   configs = []
 
@@ -1798,7 +1798,7 @@ config("no_rtti") {
 # to heap-allocated memory are passed over shared library boundaries.
 config("export_dynamic") {
   # TODO(crbug.com/1052397): Revisit after target_os flip is completed.
-  if (is_linux || is_chromeos_lacros || export_libcxxabi_from_executables) {
+  if (is_linux || is_chromeos_lacros || export_libcxxabi_from_executables || is_android) {
     ldflags = [ "-rdynamic" ]
   }
 }
@@ -1973,8 +1973,6 @@ if (is_win) {
     common_optimize_on_cflags += [
       # Put data and code in their own sections, so that unused symbols
       # can be removed at link time with --gc-sections.
-      "-fdata-sections",
-      "-ffunction-sections",
     ]
     if ((!is_nacl || is_nacl_saigo) && is_clang) {
       # We don't care about unique section names, this makes object files a bit
@@ -1987,7 +1985,6 @@ if (is_win) {
       # See http://lwn.net/Articles/192624/ .
       # -O2 enables string tail merge optimization in gold and lld.
       "-Wl,-O2",
-      "-Wl,--gc-sections",
     ]
   }
 }
@@ -2373,7 +2370,7 @@ config("symbols") {
         # sections (llvm.org/PR34820).
         cflags += [ "-ggnu-pubnames" ]
       }
-      ldflags += [ "-Wl,--gdb-index" ]
+      ldflags += []
     }
   }
 
--- a/components/policy/core/browser/configuration_policy_handler.cc
+++ b/components/policy/core/browser/configuration_policy_handler.cc
@@ -360,7 +360,6 @@ SchemaValidatingPolicyHandler::SchemaVal
     Schema schema,
     SchemaOnErrorStrategy strategy)
     : NamedPolicyHandler(policy_name), schema_(schema), strategy_(strategy) {
-  DCHECK(schema_.valid());
 }
 
 SchemaValidatingPolicyHandler::~SchemaValidatingPolicyHandler() {}
--- a/components/signin/internal/identity_manager/profile_oauth2_token_service_builder.cc
+++ b/components/signin/internal/identity_manager/profile_oauth2_token_service_builder.cc
@@ -171,7 +171,6 @@ std::unique_ptr<ProfileOAuth2TokenServic
   // device ID is needed on the network thread, but can only be generated on the
   // main thread.
   std::string device_id = signin::GetSigninScopedDeviceId(pref_service);
-  DCHECK(!device_id.empty());
 #endif
 
   return std::make_unique<ProfileOAuth2TokenService>(
--- a/components/omnibox/browser/autocomplete_match.cc
+++ b/components/omnibox/browser/autocomplete_match.cc
@@ -1442,16 +1442,6 @@ void AutocompleteMatch::WriteIntoTrace(p
   dict.Add("keyword", keyword);
 }
 
-#if DCHECK_IS_ON()
-void AutocompleteMatch::Validate() const {
-  std::string provider_name = provider ? provider->GetName() : "None";
-  ValidateClassifications(contents, contents_class, provider_name);
-  ValidateClassifications(description, description_class, provider_name);
-  ValidateClassifications(description_for_shortcuts,
-                          description_class_for_shortcuts, provider_name);
-}
-#endif  // DCHECK_IS_ON()
-
 // static
 void AutocompleteMatch::ValidateClassifications(
     const std::u16string& text,
--- a/components/omnibox/browser/autocomplete_result.cc
+++ b/components/omnibox/browser/autocomplete_result.cc
@@ -730,13 +730,6 @@ void AutocompleteResult::CopyFrom(const
 #endif
 }
 
-#if DCHECK_IS_ON()
-void AutocompleteResult::Validate() const {
-  for (auto i(begin()); i != end(); ++i)
-    i->Validate();
-}
-#endif  // DCHECK_IS_ON()
-
 // static
 GURL AutocompleteResult::ComputeAlternateNavUrl(
     const AutocompleteInput& input,
--- a/components/omnibox/browser/shortcuts_backend.cc
+++ b/components/omnibox/browser/shortcuts_backend.cc
@@ -120,9 +120,6 @@ void ShortcutsBackend::RemoveObserver(Sh
 
 void ShortcutsBackend::AddOrUpdateShortcut(const std::u16string& text,
                                            const AutocompleteMatch& match) {
-#if DCHECK_IS_ON()
-  match.Validate();
-#endif  // DCHECK_IS_ON()
   const std::u16string text_lowercase(base::i18n::ToLower(text));
   const base::Time now(base::Time::Now());
 
--- a/components/omnibox/browser/autocomplete_controller.cc
+++ b/components/omnibox/browser/autocomplete_controller.cc
@@ -754,9 +754,6 @@ void AutocompleteController::UpdateResul
 
   // Need to validate before invoking CopyOldMatches as the old matches are not
   // valid against the current input.
-#if DCHECK_IS_ON()
-  result_.Validate();
-#endif  // DCHECK_IS_ON()
 
   if (!done_) {
     // This conditional needs to match the conditional in Start that invokes
--- a/content/common/input/input_event_stream_validator.cc
+++ b/content/common/input/input_event_stream_validator.cc
@@ -29,9 +29,6 @@ void InputEventStreamValidator::Validate
   if (!enabled_)
     return;
 
-  DCHECK(ValidateImpl(event, &error_msg_))
-      << error_msg_
-      << "\nInvalid Event: " << ui::WebInputEventTraits::ToString(event);
 }
 
 bool InputEventStreamValidator::ValidateImpl(
--- a/services/network/network_context.cc
+++ b/services/network/network_context.cc
@@ -1176,7 +1176,6 @@ void NetworkContext::QueueReport(
     const net::NetworkIsolationKey& network_isolation_key,
     const absl::optional<std::string>& user_agent,
     base::Value body) {
-  NOTREACHED();
 }
 
 void NetworkContext::QueueSignedExchangeReport(
--- a/url/gurl.cc
+++ b/url/gurl.cc
@@ -158,7 +158,7 @@ const std::string& GURL::spec() const {
   if (is_valid_ || spec_.empty())
     return spec_;
 
-  DCHECK(false) << "Trying to get the spec of an invalid URL!";
+  //DCHECK(false) << "Trying to get the spec of an invalid URL!";
   return base::EmptyString();
 }
 
--- a/base/logging.cc
+++ b/base/logging.cc
@@ -908,7 +908,7 @@ LogMessage::~LogMessage() {
 #if defined(OFFICIAL_BUILD) && defined(NDEBUG)
       IMMEDIATE_CRASH();
 #else
-      base::debug::BreakDebugger();
+      //base::debug::BreakDebugger();
 #endif
     }
   }
--- a/base/supports_user_data.cc
+++ b/base/supports_user_data.cc
@@ -22,7 +22,7 @@ SupportsUserData::SupportsUserData(Suppo
 SupportsUserData& SupportsUserData::operator=(SupportsUserData&&) = default;
 
 SupportsUserData::Data* SupportsUserData::GetUserData(const void* key) const {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+//   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
   // Avoid null keys; they are too vulnerable to collision.
   DCHECK(key);
   auto found = user_data_.find(key);
@@ -33,7 +33,7 @@ SupportsUserData::Data* SupportsUserData
 
 void SupportsUserData::SetUserData(const void* key,
                                    std::unique_ptr<Data> data) {
-  DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
+//   DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);
   // Avoid null keys; they are too vulnerable to collision.
   DCHECK(key);
   if (data.get())
